#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# -*- mode: python -*-
# vi: set ft=python :

import argparse

from datetime import date, timedelta


import pandas as pd

from colorama import init, Fore, Style
from git import Repo


init()

BIN = [None] * 4
BIN[0] = 'â– ' + Style.RESET_ALL
BIN[1] =    Style.DIM + Fore.GREEN + BIN[0]
BIN[2] = Style.NORMAL + Fore.GREEN + BIN[0]
BIN[3] = Style.BRIGHT + Fore.GREEN + BIN[0]


def parse_args():
    p = argparse.ArgumentParser(
        description='Show git contributions over time a la GitHub'
    )

    p.add_argument('repo', nargs='?', default='.',
                   help='Specify repo to examine')
    # TODO: allow specify branch -- default to active_branch
    p.add_argument('--start', help='date to start')

    return p.parse_args()


def commits_per_day(repo, start_date):
    """
    return DataFrame of 'date', 'count', 'bin' indexed by date
    """
    commits = repo.iter_commits(after=start_date)
    df = pd.DataFrame((co.committed_date for co in commits),
                      columns=['committed_date'])
    df['committed_date'] = pd.to_datetime(df['committed_date'], unit='s')
    df = df.groupby([df['committed_date'].dt.date]).count()
    df = df.rename(columns={'committed_date': 'count'})
    df.index = pd.DatetimeIndex(df.index)
    date_idx = pd.date_range(start=start_date, end="2022-05-30")
    df = df.reindex(date_idx, fill_value=0)

    df['bin'] = pd.cut(df['count'], bins=len(BIN), labels=range(len(BIN)))
    return df


def color_bin(number_bin):
    """
    map bin/quartile into color block
    """
    return BIN[number_bin]


def month_headers(start_date):
    months = ['Jan', 'Feb', 'Mar', 'Apr',
              'May', 'Jun', 'Jul', 'Aug',
              'Sep', 'Oct', 'Nov', 'Dec']
    current_month = start_date.month  # Between 1 and 12 inclusive

    # rotate months
    index = 0
    while index < current_month:
        months.append(months.pop(0))
        index += 1

    return " " * 4 + "".join(f"{month:^9}" for month in months)
    # not a great algo -- there's 52 weeks, with a space between each, so
    # that's 103 columns.  103/12 = 8.583, so 9 will cause weird spacing.
    # TODO: do this better


def day_of_week(day, cpd):
    """
    render row for this week:  day name + colored commit weight for each day
    day is expected as 0-Sun..6-Sat
    """
    row_buffer = []

    # 0 is Sunday; 6 is Saturday
    start_idx = cpd.first_valid_index()
    start_weekday = (start_idx.isoweekday()) % 7

    # Add row header (day of week)
    if day == 1:
        row_buffer.append('Mon')
    elif day == 3:
        row_buffer.append('Wed')
    elif day == 5:
        row_buffer.append('Fri')
    else:
        row_buffer.append(' ' * 3)

    # First week may need padding...  i.e if Activity run on Wednesday
    # then, have to blank Sun/Mon/Tue in the first week's column
    if day < start_weekday:
        row_buffer.append(' ')

    # day_of_week_filter
    # a filter to pull all indices that align to input day
    idx = cpd.index.astype('datetime64[ns]')
    dow_filter = ((idx.dayofweek + 1) % 7) == day
    # Add row data points
    for day_bin in cpd[dow_filter]['bin'].tolist():
        row_buffer.append(color_bin(day_bin))

    # row_buffer should look like:  ['Mon', 'X0', 'X3', 'X0', ...]
    return " ".join(row_buffer)


def legend(min, max):
    """
    expect to receive weight range -- min to max
    """
    return f" Less [{min}] {BIN[0]} {BIN[1]} {BIN[2]} {BIN[3]} [{max}] More"


def chart(commits_per_day):
    """
    print chart of activity: height is day-of-week, width is week of
    year (labeled by month), and data point is color gradation (dull is
    zero count of commits that day; brightest is max commit value).
    """
    chart_rows = []  # a buffer for the output
    start_date = commits_per_day.first_valid_index()

    # construct chart row by row
    chart_rows.append(month_headers(start_date))
    for day in range(0, 7):
        chart_rows.append(day_of_week(day, commits_per_day))
    chart_rows.append("")  # blank line before legend
    chart_rows.append(legend(0, commits_per_day.max()['count']))

    for row in chart_rows:
        print(row)


def main():
    args = parse_args()

    if args.start:
        start = args.start
    else:
        start_date = date.today() - timedelta(days=365)
        start = start_date.isoformat()

    repo = Repo(args.repo)
    cpd = commits_per_day(repo, start)
    chart(cpd)


if __name__ == "__main__":
    main()
